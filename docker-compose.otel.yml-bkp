# OpenTelemetry Development Stack
# This Docker Compose file sets up a complete observability stack for development
# including Jaeger for traces, Prometheus for metrics, and the OpenTelemetry Collector

version: '3.8'

services:
  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics
    depends_on:
      - jaeger
      - prometheus
    networks:
      - otel-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # gRPC
      - "14268:14268" # HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - otel-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"   # Prometheus UI
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - otel-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"   # Grafana UI
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - otel-network

  # Note: Qdrant is expected to be running externally on localhost:6333
  # If you need to run Qdrant in Docker, uncomment the section below:
  #
  # qdrant:
  #   image: qdrant/qdrant:latest
  #   container_name: qdrant
  #   ports:
  #     - "6333:6333"   # Qdrant API
  #     - "6334:6334"   # Qdrant gRPC
  #   volumes:
  #     - qdrant-storage:/qdrant/storage
  #   networks:
  #     - otel-network

volumes:
  grafana-storage:
  # qdrant-storage:  # Uncomment if using Qdrant in Docker

networks:
  otel-network:
    driver: bridge